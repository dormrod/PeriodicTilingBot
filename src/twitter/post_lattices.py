"""
Script to post generated procrystalline lattices in reply to specific tweet ids
"""

import yaml
import requests
from requests_oauthlib import OAuth1

def main():

    users, tweet_ids = read_tweets()
    if users is not None:
        auth = generate_auth()
        reply_to_tweets(users, tweet_ids, auth)


def read_tweets():
    """Read Usernames and Tweet IDs from file generated by get_tweets"""

    with open("../../output/users.tmp", "r") as f:
        users = yaml.load(f, Loader=yaml.FullLoader)

    with open("../../output/ids.tmp", "r") as f:
        tweet_ids = yaml.load(f, Loader=yaml.FullLoader)
    return users, tweet_ids


def generate_auth():
    """Generate OAuth1"""

    with open("./secrets.yml", "r") as f:
        secrets = yaml.load(f, Loader=yaml.FullLoader)
    api_key = secrets["API_KEY"]
    api_secret_key = secrets["API_SECRET_KEY"]
    access_token = secrets["ACCESS_TOKEN"]
    access_token_secret = secrets["ACCESS_TOKEN_SECRET"]

    return OAuth1(api_key, api_secret_key, access_token, access_token_secret,
                  signature_method="HMAC-SHA1", signature_type='query')


def reply_to_tweets(users, tweet_ids, auth):
    """Reply to Tweet with procrystal"""

    for i, tweet_id in enumerate(tweet_ids):
        user = users[i]
        lattice = read_lattice(i)
        post_lattice(user, tweet_id, lattice, auth)


def read_lattice(i):
    """Read lattice with corresponding index"""

    with open(f"../../output/sq3_sample_{i}.dat", "r") as f:
        lattice = f.read()
    return lattice[:-3]


def post_lattice(user, tweet_id, lattice, auth):
    """Post lattice in response to Tweet"""

    content = f"Here's your procrystal @{user}!\n\n{lattice}"
    uri = f"https://api.twitter.com/1.1/statuses/update.json?status={content}&in_reply_to_status_id={tweet_id}"
    response = requests.request("POST", url=uri, auth=auth)
    if response.status_code != 200:
XXXXX LOGFILE XXXX

if __name__ == "__main__":
    main()